#!/usr/bin/env node
// @ts-check

const fs = require('node:fs/promises');
const path = require('node:path');

const commonTools = require('./lib/tools/common');
const consoleTools = require('./lib/tools/console');
const dialogsTools = require('./lib/tools/dialogs');
const filesTools = require('./lib/tools/files');
const installTools = require('./lib/tools/install');
const keyboardTools = require('./lib/tools/keyboard');
const navigateTools = require('./lib/tools/navigate');
const pdfTools = require('./lib/tools/pdf');
const snapshotTools = require('./lib/tools/snapshot');
const tabsTools = require('./lib/tools/tabs');
const screenTools = require('./lib/tools/screen');

// Category definitions for tools
const categories = {
  'Snapshot-based Interactions': [
    ...snapshotTools.default,
  ],
  'Vision-based Interactions': [
    ...screenTools.default
  ],
  'Tab Management': [
    ...tabsTools.default(true),
  ],
  'Navigation': [
    ...navigateTools.default(true),
  ],
  'Keyboard': [
    ...keyboardTools.default(true)
  ],
  'Console': [
    ...consoleTools.default
  ],
  'Files and Media': [
    ...filesTools.default(true),
    ...pdfTools.default
  ],
  'Utilities': [
    ...commonTools.default(true),
    ...installTools.default,
    ...dialogsTools.default(true),
  ],
};

const kStartMarker = `<!--- Generated by ${path.basename(__filename)} -->`;
const kEndMarker = `<!--- End of generated section -->`;

/**
 * Format tool information for README display
 * @param {Object} tool - Tool information
 * @returns {string} - Formatted markdown string
 */
function formatToolForReadme(tool) {
  const lines = [];
  lines.push(`<!-- NOTE: This has been generated via ${path.basename(__filename)} -->\n\n`);
  lines.push(`- **${tool.name}**\n`);
  lines.push(`  - Description: ${tool.description}\n`);

  if (tool.parameters && tool.parameters.length > 0) {
    lines.push(`  - Parameters:\n`);
    tool.parameters.forEach(param => {
      const meta = [];
      if (param.type) meta.push(param.type);
      if (param.optional) meta.push('optional');

      lines.push(`    - \`${param.name}\` ${meta.length ? `(${meta.join(', ')})` : ''}: ${param.description}\n`);
    });
  } else {
    lines.push(`  - Parameters: None\n`);
  }

  lines.push('\n');
  return lines.join('');
}

/**
 * Extract tool information from the schema
 * @param {Object} schema - Tool schema
 * @returns {Object} - Processed tool information
 */
function processToolSchema(schema) {
  // Extract the input schema properties
  const inputSchema = schema.inputSchema?.properties || {};

  // In JSON Schema, properties are considered optional unless listed in the required array
  const requiredParams = schema.inputSchema?.required || [];

  const parameters = Object.entries(inputSchema).map(([name, prop]) => {
    return {
      name,
      description: prop.description || '',
      optional: !requiredParams.includes(name),
      type: prop.type,
    };
  });

  return {
    name: schema.name,
    description: schema.description,
    parameters
  };
}

async function updateReadme() {
  console.log('Loading tool information from compiled modules...');

  // Count the tools processed
  const totalTools = Object.values(categories).flat().length;
  console.log(`Found ${totalTools} tools`);

  let generatedLines = [];

  for (const [category, categoryTools] of Object.entries(categories)) {
    generatedLines.push(`### ${category}\n\n`);
    for (const tool of categoryTools) {
      const scheme = processToolSchema(tool.schema);
      generatedLines.push(formatToolForReadme(scheme));
    }
  }

  const readmePath = path.join(__dirname, 'README.md');
  let readmeContent = await fs.readFile(readmePath, 'utf-8');
  const startMarker = readmeContent.indexOf(kStartMarker);
  const endMarker = readmeContent.indexOf(kEndMarker);
  if (startMarker === -1 || endMarker === -1)
    throw new Error('Markers for generated section not found in README');

  const newReadmeContent = [
    readmeContent.slice(0, startMarker),
    kStartMarker + '\n\n',
    generatedLines.join(''),
    kEndMarker,
    readmeContent.slice(endMarker + kEndMarker.length),
  ].join('');

  // Write updated README
  await fs.writeFile(readmePath, newReadmeContent, 'utf-8');
  console.log('README updated successfully');
}

// Run the update
updateReadme().catch(err => {
  console.error('Error updating README:', err);
  process.exit(1);
});